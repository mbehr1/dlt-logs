import * as assert from 'assert'
import { getSearchFilters } from '../../panels/SearchPanel'

suite('Search Panel Test Suite', () => {
  suite('non eac searches', () => {
    test('non regex, ignore case', () => {
      const filters = getSearchFilters({ searchString: 'foo', useCaseSensitive: false, useRegex: false })
      assert.strictEqual(1, filters.length)
      assert.strictEqual('foo', filters[0].payload)
      assert.strictEqual(true, filters[0].ignoreCasePayload)
    })
    test('non regex, case sensitive', () => {
      const filters = getSearchFilters({ searchString: 'foo', useCaseSensitive: true, useRegex: false })
      assert.strictEqual(1, filters.length)
      assert.strictEqual('foo', filters[0].payload)
      assert.strictEqual(false, filters[0].ignoreCasePayload)
    })
    test('non regex, case sensitive, start with space @', () => {
      const filters = getSearchFilters({ searchString: ' @ needle', useCaseSensitive: true, useRegex: false })
      assert.strictEqual(1, filters.length)
      assert.strictEqual('@ needle', filters[0].payload)
      assert.strictEqual(false, filters[0].ignoreCasePayload)
    })
    test('regex, ignore case', () => {
      const filters = getSearchFilters({ searchString: '^foo', useCaseSensitive: false, useRegex: true })
      assert.strictEqual(1, filters.length)
      assert.strictEqual('^foo', filters[0].payloadRegex?.source)
      assert.strictEqual(true, filters[0].ignoreCasePayload)
    })
    test('regex, case sensitive', () => {
      const filters = getSearchFilters({ searchString: 'foo|^bar', useCaseSensitive: true, useRegex: true })
      assert.strictEqual(1, filters.length)
      assert.strictEqual('foo|^bar', filters[0].payloadRegex?.source)
      assert.strictEqual(false, filters[0].ignoreCasePayload)
    })
  })
  suite('non regex eac search', () => {
    test('single ecu ignore case', () => {
      const filters = getSearchFilters({ searchString: '@ECU1 needle', useCaseSensitive: false, useRegex: false })
      assert.strictEqual(1, filters.length)
      assert.strictEqual('ECU1', filters[0].ecu)
      assert.strictEqual(undefined, filters[0].apid)
      assert.strictEqual(undefined, filters[0].ctid)
      assert.strictEqual('needle', filters[0].payload)
      assert.strictEqual(true, filters[0].ignoreCasePayload)
    })
    test('single ecu no search text ignore case', () => {
      const filters = getSearchFilters({ searchString: '@ECU1', useCaseSensitive: false, useRegex: false })
      assert.strictEqual(1, filters.length)
      assert.strictEqual('ECU1', filters[0].ecu)
      assert.strictEqual(undefined, filters[0].apid)
      assert.strictEqual(undefined, filters[0].ctid)
      assert.strictEqual(undefined, filters[0].payload)
      assert.strictEqual(true, filters[0].ignoreCasePayload)
    })
    test('single ecu,apid case sensitive', () => {
      const filters = getSearchFilters({ searchString: '@ECU1:APID needle', useCaseSensitive: true, useRegex: false })
      assert.strictEqual(1, filters.length)
      assert.strictEqual('ECU1', filters[0].ecu)
      assert.strictEqual('APID', filters[0].apid)
      assert.strictEqual(undefined, filters[0].ctid)
      assert.strictEqual('needle', filters[0].payload)
      assert.strictEqual(false, filters[0].ignoreCasePayload)
    })
    test('two ecus case sensitive', () => {
      const filters = getSearchFilters({ searchString: '@ECU1::CTID,ECU2 error', useCaseSensitive: true, useRegex: false })
      assert.strictEqual(2, filters.length)
      assert.strictEqual('ECU1', filters[0].ecu)
      assert.strictEqual(undefined, filters[0].apid)
      assert.strictEqual('CTID', filters[0].ctid)
      assert.strictEqual('error', filters[0].payload)
      assert.strictEqual(false, filters[0].ignoreCasePayload)
      assert.strictEqual('ECU2', filters[1].ecu)
      assert.strictEqual(undefined, filters[1].apid)
      assert.strictEqual(undefined, filters[1].ctid)
      assert.strictEqual('error', filters[1].payload)
      assert.strictEqual(false, filters[1].ignoreCasePayload)
    })
    test('two ecus round brackets ignore case', () => {
      // this is supported as well. here the round brackets are not needed but in the regex case they are
      const filters = getSearchFilters({ searchString: '@(ECU1|ECU2::CTID) error', useCaseSensitive: false, useRegex: false })
      assert.strictEqual(1, filters.length)
      assert.strictEqual('/ECU1|ECU2/', filters[0].ecu?.toString())
      assert.strictEqual(undefined, filters[0].apid)
      assert.strictEqual('CTID', filters[0].ctid)
      assert.strictEqual('error', filters[0].payload)
      assert.strictEqual(true, filters[0].ignoreCasePayload)
    })
  })
  suite('regex eac search', () => {
    test('doc ex1 ignore case', () => {
      const filters = getSearchFilters({ searchString: '@ECU1 ^foo|@ECU2:API2 bar|error', useCaseSensitive: false, useRegex: true })
      assert.strictEqual(3, filters.length)
      assert.strictEqual('ECU1', filters[0].ecu)
      assert.strictEqual(undefined, filters[0].apid)
      assert.strictEqual(undefined, filters[0].ctid)
      assert.strictEqual('^foo', filters[0].payloadRegex?.source)
      assert.strictEqual(true, filters[0].ignoreCasePayload)
      assert.strictEqual('ECU2', filters[1].ecu)
      assert.strictEqual('API2', filters[1].apid)
      assert.strictEqual(undefined, filters[1].ctid)
      assert.strictEqual('bar', filters[1].payloadRegex?.source)
      assert.strictEqual(true, filters[1].ignoreCasePayload)
      assert.strictEqual(undefined, filters[2].ecu)
      assert.strictEqual(undefined, filters[2].apid)
      assert.strictEqual(undefined, filters[2].ctid)
      assert.strictEqual('error', filters[2].payloadRegex?.source)
      assert.strictEqual(true, filters[2].ignoreCasePayload)
    })
    test('doc note case sensitive', () => {
      const filters = getSearchFilters({ searchString: '\\ @ foo', useCaseSensitive: true, useRegex: true })
      assert.strictEqual(1, filters.length)
      assert.strictEqual(undefined, filters[0].ecu)
      assert.strictEqual(undefined, filters[0].apid)
      assert.strictEqual(undefined, filters[0].ctid)
      assert.strictEqual('\\ @ foo', filters[0].payloadRegex?.source)
      assert.strictEqual(false, filters[0].ignoreCasePayload)
    })
    test('doc ex2 case sensitive', () => {
      const filters = getSearchFilters({ searchString: '@ECU1:APID needle|error', useCaseSensitive: true, useRegex: true })
      assert.strictEqual(2, filters.length)
      assert.strictEqual('ECU1', filters[0].ecu)
      assert.strictEqual('APID', filters[0].apid)
      assert.strictEqual(undefined, filters[0].ctid)
      assert.strictEqual('needle', filters[0].payloadRegex?.source)
      assert.strictEqual(false, filters[0].ignoreCasePayload)
      assert.strictEqual(undefined, filters[1].ecu)
      assert.strictEqual(undefined, filters[1].apid)
      assert.strictEqual(undefined, filters[1].ctid)
      assert.strictEqual('error', filters[1].payloadRegex?.source)
      assert.strictEqual(false, filters[1].ignoreCasePayload)
    })
    test('doc ex3 case sensitive', () => {
      const filters = getSearchFilters({ searchString: '@ECU1 (foo|bar)', useCaseSensitive: true, useRegex: true })
      assert.strictEqual(1, filters.length)
      assert.strictEqual('ECU1', filters[0].ecu)
      assert.strictEqual(undefined, filters[0].apid)
      assert.strictEqual(undefined, filters[0].ctid)
      assert.strictEqual('(foo|bar)', filters[0].payloadRegex?.source)
      assert.strictEqual(false, filters[0].ignoreCasePayload)
    })
    test('doc ex4 case sensitive', () => {
      const filters = getSearchFilters({ searchString: ' @ECU1 foo|bar', useCaseSensitive: true, useRegex: true })
      assert.strictEqual(1, filters.length) // grouped by same EAC! (here none)
      assert.strictEqual(undefined, filters[0].ecu)
      assert.strictEqual(undefined, filters[0].apid)
      assert.strictEqual(undefined, filters[0].ctid)
      assert.strictEqual('@ECU1 foo|bar', filters[0].payloadRegex?.source)
      assert.strictEqual(false, filters[0].ignoreCasePayload)
    })
    test('doc ex5 case sensitive', () => {
      const filters = getSearchFilters({ searchString: '@ECU1 (foo|@ECU2 bar)', useCaseSensitive: true, useRegex: true })
      assert.strictEqual(1, filters.length)
      assert.strictEqual('ECU1', filters[0].ecu)
      assert.strictEqual(undefined, filters[0].apid)
      assert.strictEqual(undefined, filters[0].ctid)
      assert.strictEqual('(foo|@ECU2 bar)', filters[0].payloadRegex?.source)
      assert.strictEqual(false, filters[0].ignoreCasePayload)
    })
    test('doc ex6 case sensitive', () => {
      const filters = getSearchFilters({ searchString: '@ECU1 foo|@ECU2 bar', useCaseSensitive: true, useRegex: true })
      assert.strictEqual(2, filters.length)
      assert.strictEqual('ECU1', filters[0].ecu)
      assert.strictEqual(undefined, filters[0].apid)
      assert.strictEqual(undefined, filters[0].ctid)
      assert.strictEqual('foo', filters[0].payloadRegex?.source)
      assert.strictEqual(false, filters[0].ignoreCasePayload)
      assert.strictEqual('ECU2', filters[1].ecu)
      assert.strictEqual(undefined, filters[1].apid)
      assert.strictEqual(undefined, filters[1].ctid)
      assert.strictEqual('bar', filters[1].payloadRegex?.source)
      assert.strictEqual(false, filters[1].ignoreCasePayload)
    })
    test('doc ex7 case sensitive', () => {
      const filters = getSearchFilters({ searchString: '@:APID foo|@::CTID bar', useCaseSensitive: true, useRegex: true })
      assert.strictEqual(2, filters.length)
      assert.strictEqual(undefined, filters[0].ecu)
      assert.strictEqual('APID', filters[0].apid)
      assert.strictEqual(undefined, filters[0].ctid)
      assert.strictEqual('foo', filters[0].payloadRegex?.source)
      assert.strictEqual(false, filters[0].ignoreCasePayload)
      assert.strictEqual(undefined, filters[1].ecu)
      assert.strictEqual(undefined, filters[1].apid)
      assert.strictEqual('CTID', filters[1].ctid)
      assert.strictEqual('bar', filters[1].payloadRegex?.source)
      assert.strictEqual(false, filters[1].ignoreCasePayload)
    })
    test('doc ex8 case sensitive', () => {
      const filters = getSearchFilters({ searchString: '@(:AP1|AP2) foo|@::CTID (bar| @foo)', useCaseSensitive: true, useRegex: true })
      assert.strictEqual(2, filters.length)
      assert.strictEqual(undefined, filters[0].ecu)
      assert.strictEqual('/AP1|AP2/', filters[0].apid?.toString())
      assert.strictEqual(undefined, filters[0].ctid)
      assert.strictEqual('foo', filters[0].payloadRegex?.source)
      assert.strictEqual(false, filters[0].ignoreCasePayload)
      assert.strictEqual(undefined, filters[1].ecu)
      assert.strictEqual(undefined, filters[1].apid)
      assert.strictEqual('CTID', filters[1].ctid)
      assert.strictEqual('(bar| @foo)', filters[1].payloadRegex?.source)
      assert.strictEqual(false, filters[1].ignoreCasePayload)
    })
    test('two same EAC case sensitive', () => {
      const filters = getSearchFilters({ searchString: '@ECU1 foo|@ECU1 bar', useCaseSensitive: true, useRegex: true })
      assert.strictEqual(1, filters.length)
      assert.strictEqual('ECU1', filters[0].ecu)
      assert.strictEqual(undefined, filters[0].apid)
      assert.strictEqual(undefined, filters[0].ctid)
      assert.strictEqual('foo|bar', filters[0].payloadRegex?.source)
      assert.strictEqual(false, filters[0].ignoreCasePayload)
    })
    test('doc ex9 case sensitive', () => {
      const filters = getSearchFilters({ searchString: '@:APID', useCaseSensitive: true, useRegex: true })
      assert.strictEqual(1, filters.length)
      assert.strictEqual(undefined, filters[0].ecu)
      assert.strictEqual('APID', filters[0].apid)
      assert.strictEqual(undefined, filters[0].ctid)
      assert.strictEqual(undefined, filters[0].payloadRegex)
      assert.strictEqual(false, filters[0].ignoreCasePayload)
    })
    test('doc ex10 case sensitive', () => {
      const filters = getSearchFilters({ searchString: '@:APID,::CTID foo', useCaseSensitive: true, useRegex: true })
      assert.strictEqual(2, filters.length)
      assert.strictEqual(undefined, filters[0].ecu)
      assert.strictEqual('APID', filters[0].apid)
      assert.strictEqual(undefined, filters[0].ctid)
      assert.strictEqual('foo', filters[0].payloadRegex?.source)
      assert.strictEqual(false, filters[0].ignoreCasePayload)
      assert.strictEqual(undefined, filters[1].ecu)
      assert.strictEqual(undefined, filters[1].apid)
      assert.strictEqual('CTID', filters[1].ctid)
      assert.strictEqual('foo', filters[1].payloadRegex?.source)
      assert.strictEqual(false, filters[1].ignoreCasePayload)
    })
  })
})
